#ifndef AC_SIMD_WRITER_HPP
#define AC_SIMD_WRITER_HPP

#include <simd/runtime.hpp>
#include <simd/memory.hpp>


namespace simd {
  template <typename Topic> 
  class DataWriter;

  template <typename Topic>
  class DataInstanceWriter;
}

template <typename DDSDataWriter, typename SIMDTopic, typename DataType>
class simd::DataWriter {
public:
  DataWriter(SIMDTopic& topic) {
    pub_ = 
      simd::Runtime::instance()->get_publisher();
    
    simd::TopicQos tqos(topic.get_qos());
    simd::DataWriterQos dwqos(tqos);
    // DATAWRITER_QOS_USE_TOPIC_QOS,
    DDS::DataWriter* w = pub_->create_datawriter(topic.get_dds_topic(),
						 dwqos,
						 0,
						 DDS::ANY_STATUS);
    
    boost::shared_ptr<DDSDataWriter> tmp(DDSDataWriter::_narrow(w), simd::mem::DWDeleter(pub_));
    writer_ = tmp;
  }
  
  DataWriter(SIMDTopic& topic, const simd::DataWriterQos& qos) {
    pub_ = 
      simd::Runtime::instance()->get_publisher();
    DDS::DataWriter* w = pub_->create_datawriter(topic.get_dds_topic(),
						 qos,
						 0,
						 DDS::ANY_STATUS);
    
    boost::shared_ptr<DDSDataWriter> tmp(DDSDataWriter::_narrow(w), 
					 simd::mem::DWDeleter(pub_));
    writer_ = tmp;
  }
  
  ~DataWriter() { }

public:
  DDS::ReturnCode_t write(const DataType& sample) {
    writer_->write(sample, DDS::HANDLE_NIL);
  }

  DDS::ReturnCode_t write(const DataType& sample, const DDS::Time_t& timestamp) {
    writer_->write(sample, timestamp, DDS::HANDLE_NIL);
  }

  boost::shared_ptr<simd::DataInstanceWriter<DDSDataWriter, DataType> >
  register_instance(const DataType& key) {
    boost::shared_ptr<simd::DataInstanceWriter<DDSDataWriter, DataType> > 
      iwriter(new simd::DataInstanceWriter<DDSDataWriter, DataType> (writer_, key));
    return iwriter;
  }
  
protected:
  boost::shared_ptr<DDS::Publisher> pub_;
  boost::shared_ptr<DDSDataWriter> writer_;
};

template <typename DDSDataWriter, typename DataType>
class simd::DataInstanceWriter {

public:
  DataInstanceWriter(boost::shared_ptr<DDSDataWriter> writer, const DataType& key) 
    : writer_(writer),
      key_(key) 
  {
    handle_ = writer_->register_instance(key_);
  }

  ~DataInstanceWriter() {
    writer_->unregister_handle(handle_, key_);
  }

public:
  
  DDS::ReturnCode_t write(const DataType& data) {
    writer_->write(data, handle_);
  }
  
  DDS::ReturnCode_t write(const DataType& sample, const DDS::Time_t& timestamp) {
    writer_->write(sample, timestamp, handle_);
  }
  
private:
  boost::shared_ptr<DDSDataWriter> writer_;
  DataType key_;
  long handle_;

};

#endif /* AC_SIMD_WRITER_HPP */
