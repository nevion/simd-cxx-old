//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: pingDcps.cpp
//  Source: gen/pingDcps.idl
//  Generated: Tue Oct 12 15:09:42 2010
//  OpenSplice V5.3.0OSS
//  
//******************************************************************

#include "pingDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < PingType, struct PingTypeSeq_uniq_>;
#endif

const char * PingTypeTypeSupportInterface::_local_id = "IDL:PingTypeTypeSupportInterface:1.0";

PingTypeTypeSupportInterface_ptr PingTypeTypeSupportInterface::_duplicate (PingTypeTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean PingTypeTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, PingTypeTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

PingTypeTypeSupportInterface_ptr PingTypeTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   PingTypeTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (PingTypeTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < PingTypeTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

PingTypeTypeSupportInterface_ptr PingTypeTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   PingTypeTypeSupportInterface_ptr result;
   result = dynamic_cast < PingTypeTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * PingTypeDataWriter::_local_id = "IDL:PingTypeDataWriter:1.0";

PingTypeDataWriter_ptr PingTypeDataWriter::_duplicate (PingTypeDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean PingTypeDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, PingTypeDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

PingTypeDataWriter_ptr PingTypeDataWriter::_narrow (DDS::Object_ptr p)
{
   PingTypeDataWriter_ptr result = NULL;
   if (p && p->_is_a (PingTypeDataWriter::_local_id))
   {
      result = dynamic_cast < PingTypeDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

PingTypeDataWriter_ptr PingTypeDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   PingTypeDataWriter_ptr result;
   result = dynamic_cast < PingTypeDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * PingTypeDataReader::_local_id = "IDL:PingTypeDataReader:1.0";

PingTypeDataReader_ptr PingTypeDataReader::_duplicate (PingTypeDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean PingTypeDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, PingTypeDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

PingTypeDataReader_ptr PingTypeDataReader::_narrow (DDS::Object_ptr p)
{
   PingTypeDataReader_ptr result = NULL;
   if (p && p->_is_a (PingTypeDataReader::_local_id))
   {
      result = dynamic_cast < PingTypeDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

PingTypeDataReader_ptr PingTypeDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   PingTypeDataReader_ptr result;
   result = dynamic_cast < PingTypeDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * PingTypeDataReaderView::_local_id = "IDL:PingTypeDataReaderView:1.0";

PingTypeDataReaderView_ptr PingTypeDataReaderView::_duplicate (PingTypeDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean PingTypeDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, PingTypeDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

PingTypeDataReaderView_ptr PingTypeDataReaderView::_narrow (DDS::Object_ptr p)
{
   PingTypeDataReaderView_ptr result = NULL;
   if (p && p->_is_a (PingTypeDataReaderView::_local_id))
   {
      result = dynamic_cast < PingTypeDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

PingTypeDataReaderView_ptr PingTypeDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   PingTypeDataReaderView_ptr result;
   result = dynamic_cast < PingTypeDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}



