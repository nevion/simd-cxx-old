//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: pingDcps.h
//  Source: gen/pingDcps.idl
//  Generated: Tue Oct 12 15:09:42 2010
//  OpenSplice V5.3.0OSS
//  
//******************************************************************
#ifndef _PINGDCPS_H_
#define _PINGDCPS_H_


#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_interfaces.h"
#include "dds_builtinTopics.h"
#include "dds_dcps_builtintopics.h"
#include "ping.h"
struct PingType;

class PingTypeTypeSupportInterface;

typedef PingTypeTypeSupportInterface * PingTypeTypeSupportInterface_ptr;
typedef DDS_DCPSInterface_var < PingTypeTypeSupportInterface> PingTypeTypeSupportInterface_var;
typedef DDS_DCPSInterface_out < PingTypeTypeSupportInterface> PingTypeTypeSupportInterface_out;


class PingTypeDataWriter;

typedef PingTypeDataWriter * PingTypeDataWriter_ptr;
typedef DDS_DCPSInterface_var < PingTypeDataWriter> PingTypeDataWriter_var;
typedef DDS_DCPSInterface_out < PingTypeDataWriter> PingTypeDataWriter_out;


class PingTypeDataReader;

typedef PingTypeDataReader * PingTypeDataReader_ptr;
typedef DDS_DCPSInterface_var < PingTypeDataReader> PingTypeDataReader_var;
typedef DDS_DCPSInterface_out < PingTypeDataReader> PingTypeDataReader_out;


class PingTypeDataReaderView;

typedef PingTypeDataReaderView * PingTypeDataReaderView_ptr;
typedef DDS_DCPSInterface_var < PingTypeDataReaderView> PingTypeDataReaderView_var;
typedef DDS_DCPSInterface_out < PingTypeDataReaderView> PingTypeDataReaderView_out;


struct PingTypeSeq_uniq_ {};
typedef DDS_DCPSUVLSeq < PingType, struct PingTypeSeq_uniq_> PingTypeSeq;
typedef DDS_DCPSSequence_var < PingTypeSeq> PingTypeSeq_var;
typedef DDS_DCPSSequence_out < PingTypeSeq> PingTypeSeq_out;
class PingTypeTypeSupportInterface
:
   virtual public DDS::TypeSupport
{ 
public:
   typedef PingTypeTypeSupportInterface_ptr _ptr_type;
   typedef PingTypeTypeSupportInterface_var _var_type;

   static PingTypeTypeSupportInterface_ptr _duplicate (PingTypeTypeSupportInterface_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PingTypeTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
   static PingTypeTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PingTypeTypeSupportInterface_ptr _nil () { return 0; }
   static const char * _local_id;
   PingTypeTypeSupportInterface_ptr _this () { return this; }


protected:
   PingTypeTypeSupportInterface () {};
   ~PingTypeTypeSupportInterface () {};
private:
   PingTypeTypeSupportInterface (const PingTypeTypeSupportInterface &);
   PingTypeTypeSupportInterface & operator = (const PingTypeTypeSupportInterface &);
};

class PingTypeDataWriter
:
   virtual public DDS::DataWriter
{ 
public:
   typedef PingTypeDataWriter_ptr _ptr_type;
   typedef PingTypeDataWriter_var _var_type;

   static PingTypeDataWriter_ptr _duplicate (PingTypeDataWriter_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PingTypeDataWriter_ptr _narrow (DDS::Object_ptr obj);
   static PingTypeDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PingTypeDataWriter_ptr _nil () { return 0; }
   static const char * _local_id;
   PingTypeDataWriter_ptr _this () { return this; }

   virtual DDS::InstanceHandle_t register_instance (const PingType& instance_data) = 0;
   virtual DDS::InstanceHandle_t register_instance_w_timestamp (const PingType& instance_data, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t unregister_instance (const PingType& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const PingType& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t write (const PingType& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t write_w_timestamp (const PingType& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t dispose (const PingType& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t dispose_w_timestamp (const PingType& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t writedispose (const PingType& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t writedispose_w_timestamp (const PingType& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t get_key_value (PingType& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const PingType& instance_data) = 0;

protected:
   PingTypeDataWriter () {};
   ~PingTypeDataWriter () {};
private:
   PingTypeDataWriter (const PingTypeDataWriter &);
   PingTypeDataWriter & operator = (const PingTypeDataWriter &);
};

class PingTypeDataReader
:
   virtual public DDS::DataReader
{ 
public:
   typedef PingTypeDataReader_ptr _ptr_type;
   typedef PingTypeDataReader_var _var_type;

   static PingTypeDataReader_ptr _duplicate (PingTypeDataReader_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PingTypeDataReader_ptr _narrow (DDS::Object_ptr obj);
   static PingTypeDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PingTypeDataReader_ptr _nil () { return 0; }
   static const char * _local_id;
   PingTypeDataReader_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (PingType& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (PingType& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (PingType& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const PingType& instance) = 0;

protected:
   PingTypeDataReader () {};
   ~PingTypeDataReader () {};
private:
   PingTypeDataReader (const PingTypeDataReader &);
   PingTypeDataReader & operator = (const PingTypeDataReader &);
};

class PingTypeDataReaderView
:
   virtual public DDS::DataReaderView
{ 
public:
   typedef PingTypeDataReaderView_ptr _ptr_type;
   typedef PingTypeDataReaderView_var _var_type;

   static PingTypeDataReaderView_ptr _duplicate (PingTypeDataReaderView_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PingTypeDataReaderView_ptr _narrow (DDS::Object_ptr obj);
   static PingTypeDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PingTypeDataReaderView_ptr _nil () { return 0; }
   static const char * _local_id;
   PingTypeDataReaderView_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (PingType& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (PingType& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (PingTypeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (PingType& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const PingType& instance) = 0;

protected:
   PingTypeDataReaderView () {};
   ~PingTypeDataReaderView () {};
private:
   PingTypeDataReaderView (const PingTypeDataReaderView &);
   PingTypeDataReaderView & operator = (const PingTypeDataReaderView &);
};

template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
