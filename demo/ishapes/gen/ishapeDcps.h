//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: ishapeDcps.h
//  Source: gen/ishapeDcps.idl
//  Generated: Mon Mar 15 16:10:44 2010
//  OpenSplice V4.3
//  
//******************************************************************
#ifndef _ISHAPEDCPS_H_
#define _ISHAPEDCPS_H_


#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "ishape.h"
struct ShapeType;

class ShapeTypeTypeSupportInterface;

typedef ShapeTypeTypeSupportInterface * ShapeTypeTypeSupportInterface_ptr;
typedef DDS_DCPSInterface_var < ShapeTypeTypeSupportInterface> ShapeTypeTypeSupportInterface_var;
typedef DDS_DCPSInterface_out < ShapeTypeTypeSupportInterface> ShapeTypeTypeSupportInterface_out;


class ShapeTypeDataWriter;

typedef ShapeTypeDataWriter * ShapeTypeDataWriter_ptr;
typedef DDS_DCPSInterface_var < ShapeTypeDataWriter> ShapeTypeDataWriter_var;
typedef DDS_DCPSInterface_out < ShapeTypeDataWriter> ShapeTypeDataWriter_out;


class ShapeTypeDataReader;

typedef ShapeTypeDataReader * ShapeTypeDataReader_ptr;
typedef DDS_DCPSInterface_var < ShapeTypeDataReader> ShapeTypeDataReader_var;
typedef DDS_DCPSInterface_out < ShapeTypeDataReader> ShapeTypeDataReader_out;


struct ShapeTypeSeq_uniq_ {};
typedef DDS_DCPSUVLSeq < ShapeType, struct ShapeTypeSeq_uniq_> ShapeTypeSeq;
typedef DDS_DCPSSequence_var < ShapeTypeSeq> ShapeTypeSeq_var;
typedef DDS_DCPSSequence_out < ShapeTypeSeq> ShapeTypeSeq_out;
class ShapeTypeTypeSupportInterface
:
   virtual public DDS::TypeSupport
{ 
public:
   typedef ShapeTypeTypeSupportInterface_ptr _ptr_type;
   typedef ShapeTypeTypeSupportInterface_var _var_type;

   static ShapeTypeTypeSupportInterface_ptr _duplicate (ShapeTypeTypeSupportInterface_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static ShapeTypeTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
   static ShapeTypeTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static ShapeTypeTypeSupportInterface_ptr _nil () { return 0; }
   static const char * _local_id;
   ShapeTypeTypeSupportInterface_ptr _this () { return this; }


protected:
   ShapeTypeTypeSupportInterface () {};
   ~ShapeTypeTypeSupportInterface () {};
private:
   ShapeTypeTypeSupportInterface (const ShapeTypeTypeSupportInterface &) {};
   ShapeTypeTypeSupportInterface & operator = (const ShapeTypeTypeSupportInterface &);
};

class ShapeTypeDataWriter
:
   virtual public DDS::DataWriter
{ 
public:
   typedef ShapeTypeDataWriter_ptr _ptr_type;
   typedef ShapeTypeDataWriter_var _var_type;

   static ShapeTypeDataWriter_ptr _duplicate (ShapeTypeDataWriter_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static ShapeTypeDataWriter_ptr _narrow (DDS::Object_ptr obj);
   static ShapeTypeDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static ShapeTypeDataWriter_ptr _nil () { return 0; }
   static const char * _local_id;
   ShapeTypeDataWriter_ptr _this () { return this; }

   virtual DDS::InstanceHandle_t register_instance (const ShapeType& instance_data) = 0;
   virtual DDS::InstanceHandle_t register_instance_w_timestamp (const ShapeType& instance_data, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t unregister_instance (const ShapeType& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const ShapeType& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t write (const ShapeType& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t write_w_timestamp (const ShapeType& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t dispose (const ShapeType& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t dispose_w_timestamp (const ShapeType& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t writedispose (const ShapeType& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t writedispose_w_timestamp (const ShapeType& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t get_key_value (ShapeType& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const ShapeType& instance_data) = 0;

protected:
   ShapeTypeDataWriter () {};
   ~ShapeTypeDataWriter () {};
private:
   ShapeTypeDataWriter (const ShapeTypeDataWriter &) {};
   ShapeTypeDataWriter & operator = (const ShapeTypeDataWriter &);
};

class ShapeTypeDataReader
:
   virtual public DDS::DataReader
{ 
public:
   typedef ShapeTypeDataReader_ptr _ptr_type;
   typedef ShapeTypeDataReader_var _var_type;

   static ShapeTypeDataReader_ptr _duplicate (ShapeTypeDataReader_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static ShapeTypeDataReader_ptr _narrow (DDS::Object_ptr obj);
   static ShapeTypeDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static ShapeTypeDataReader_ptr _nil () { return 0; }
   static const char * _local_id;
   ShapeTypeDataReader_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (ShapeType& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (ShapeType& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (ShapeTypeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (ShapeType& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const ShapeType& instance) = 0;

protected:
   ShapeTypeDataReader () {};
   ~ShapeTypeDataReader () {};
private:
   ShapeTypeDataReader (const ShapeTypeDataReader &) {};
   ShapeTypeDataReader & operator = (const ShapeTypeDataReader &);
};

template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
